<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>com.wang</groupId>
  <artifactId>javaweb_http_servlet</artifactId>
  <version>1.0-SNAPSHOT</version>
  <packaging>war</packaging>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <maven.compiler.source>8</maven.compiler.source>
    <maven.compiler.target>8</maven.compiler.target>
  </properties>


  <dependencies>
    <dependency>
      <groupId>javax.servlet</groupId>
      <artifactId>javax.servlet-api</artifactId>
<!-- provided指的是在编译和测试过程中有效,最后生成的war包时不会加入,因为Tomcat的lib目录中已经有servlet-api这个jar包，如果在生成war包的时候生效就会和Tomcat中的jar包冲突，导致报错-->
      <version>4.0.1</version>

      <scope>provided</scope>
    </dependency>
  </dependencies>

  <build>
    <plugins>
      <!--Tomcat插件 -->
      <plugin>
        <groupId>org.apache.tomcat.maven</groupId>
        <artifactId>tomcat7-maven-plugin</artifactId>
        <version>2.2</version>
        <configuration>
          <!--  访问端口号  -->
          <port>80</port>
          <!--  tomcat 8.0版本之后GET请求就不再出现中文乱码问题，但是我们使用的是tomcat7插件，所以会出现GET请求中文乱码问题。-->
          <!--  在pom.xml添加tomcat7插件处配置UTF-8字符集，解决GET请求中文乱码问题             -->
          <uriEncoding>UTF-8</uriEncoding><!--访问路径编解码字符集-->
          <!--项目访问路径
            未配置访问路径: http://localhost:80/tomcat-demo2/a.html
            配置/后访问路径: http://localhost:80/a.html
            如果配置成 /hello,访问路径会变成什么?
            答案: http://localhost:80/hello/a.html
          -->
          <!--<path>/80</path>-->  <!--配置项目的访问路径-->
        </configuration>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.8.1</version>
        <configuration>
          <!--  缺少发行源，先将<source>17</source>设置为<source>8</source>运行一次，再换成17，或者全部用8-->
          <!-- 一般而言，target与source是保持一致的，但是，有时候为了让程序能在其他版本的jdk中运行(对于低版本目标jdk，源代码中不能使用低版本jdk中不支持的语法)，会存在target不同于source的情况 -->
          <source>8</source> <!-- 源代码使用的JDK版本 -->
          <target>8</target> <!-- 需要生成的目标class文件的编译版本 -->
          <encoding>utf-8</encoding>
        </configuration>
      </plugin>

    </plugins>
  </build>

</project>
