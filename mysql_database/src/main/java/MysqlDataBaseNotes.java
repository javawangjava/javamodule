public class MysqlDataBaseNotes {


/**
*
* 数据库
*       数据库:存储和管理数据的仓库，数据是有组织的进行存储。
*           数据库英文名是 DataBase，简称DB；
*           数据库就是将数据存储在硬盘上，可以达到持久化存储的效果。
*
*       数据库管理系统:管理数据库的大型软件。
*           英文：DataBase Management System，简称 DBMS；
*           在电脑上安装了数据库管理系统后，就可以通过数据库管理系统创建数据库来存储数据，也可以通过该系统对数据库中的数据进行数据的增删改查相关的操作。
*           我们平时说的MySQL数据库其实是MySQL数据库管理系统。
*           可以通过数据库管理系统操作数据库，对数据库中的数据进行增删改查操作。
*           用户可以通过一门编程语言（SQL）来实现用户跟数据库管理系统打交道。
*
*
*
*      添加环境变量
*           在黑框(即CMD)中输入一个可执行程序的名字，Windows会先在环境变量中的 Path 所指的路径中寻找一遍，如果找到了就直接执行；没找到就在当前工作目录找，如果还没找到，就报错。
*           我们添加环境变量的目的就是能够在任意一个黑框直接调用MySQL中的相关程序而不用总是修改工作目录，大大简化了操作。
*
*
*           MySQL数据模型
*               关系型数据库：关系型数据库是建立在关系模型基础上的数据库，简单说，关系型数据库是由多张能互相连接的 二维表 组成的数据库。
*               有行有列二维表我们将这样的称为关系型数据库。
*               MySQL中可以创建多个数据库，每个数据库对应到磁盘上的一个文件夹；
*               在每个数据库中可以创建多个表，每张表可以存储多条数据；
*               数据库中的每张表都对应到磁盘上一个 frm 文件，数据会被存储到磁盘中 MYD 文件中
*
*
*       SQL
*       SQL简介
 *           SQL：英文：Structured Query Language，简称 SQL，结构化查询语言；
 *           操作关系型数据库的编程语言；
 *           定义操作所有关系型数据库的统一标准，可以使用SQL操作所有的关系型数据库管理系统；
 *           对于同一个需求，每一种数据库操作的方式可能会存在一些不一样的地方，我们称为“方言”。
*
*
*       SQL通用语法
*           SQL 语句可以单行或多行书写，以分号结尾；
*           MySQL 数据库的 SQL 语句不区分大小写，关键字建议使用大写；
*           注释：
*               单行注释: -- 注释内容 或 #注释内容(#注释内容是MySQL 特有)【使用-- 添加单行注释时，--后面一定要加空格，而#没有要求】；
*               多行注释: /* 注释 *（）/ 。注意斜杠前面没有（），这里是为例在注释里面写。
*
*
*
 *
*       事务
*           数据库的事务（Transaction）是一种机制、一个操作序列，包含了一组数据库操作命令。
*           事务把所有的命令作为一个整体一起向系统提交或撤销操作请求，即这一组数据库命令要么同时成功，要么同时失败。
*
*       JDBC 就是使用Java语言操作关系型数据库的一套API。
*       JDBC本质：官方（sun公司）定义的一套操作所有关系型数据库的规则，即接口。可以使用这套接口（JDBC）编程，真正执行的代码是驱动jar包中的实现类
*       JDBC的url语法：jdbc:mysql://ip地址(域名):端口号/数据库名称?参数键值对1&参数键值对2…。
*           如果连接的是本机mysql服务器，并且mysql服务默认端口是3306，则url可以简写为：jdbc:mysql:///数据库名称?参数键值对。
*           配置 useSSL=false 参数，禁用安全连接方式，解决警告提示
*           useServerPrepStmts=true 开启预编译
*
*
*
*       数据库连接池
*           数据库连接池是个容器，负责分配、管理数据库连接(Connection)；
*           它允许应用程序重复使用一个现有的数据库连接，而不是再重新建立一个；
*
*           连接池是在一开始就创建好了一些连接（Connection）对象存储起来。用户需要连接数据库时，不需要自己创建连接，而只需要从连接池中获取一个连接进行使用，使用完毕后再将连接对象归还给连接池；
*           这样就可以起到资源重用，也节省了频繁创建连接销毁连接所花费的时间，从而提升了系统响应的速度。数据库连接池
*
*           数据库连接池标准接口：DataSource。官方(SUN) 提供的数据库连接池标准接口，由第三方组织实现此接口。
*           目前使用的数据库连接池：Druid连接池是阿里巴巴开源的数据库连接池项目。
*
 *
 *
 *
 *  框架：
 *      框架就是一个半成品软件，是一套可重用的、通用的、软件基础代码模型；
 *      在框架的基础之上构建软件编写更加高效、规范、通用、可扩展。
 *
 *
 *
 *  Mybatis
 *          MyBatis 是一款优秀的持久层框架，用于简化 JDBC 开发;Mybatis就是对jdbc代码进行了封装。
 *          持久层: Dao层或者或者Mapper层【叫Mapper是因为使用Mybatis框架的Mapper代理开发】。
 *                 负责将数据到保存到数据库的那一层代码。以后开发我们会将操作数据库的Java代码作为持久层。
 *          Mybatis开的有两种方式：xml配置文件开发；注解开发【以后优先注解开发，简单】。注解完成简单功能，配置文件完成复杂功能
 *          Mybatis的注解是是用来替换映射配置文件方式配置的，所以使用了注解，就不需要再映射配置文件(xml文件)中书写对应的 statement。
 *
 *         Mybatis 优化JDBC的思路：
 *              硬编码【注册驱动、获取连接；SQL语句】可以配置到配置文件；
 *              操作繁琐的地方mybatis都自动完成；
 *
 *          Mybatis 优化JDBC的操作：使用xml配置文件开发
 *              编写 MyBatis 核心配置文件 -- > 替换连接信息 解决硬编码问题；
 *                  在模块下的 resources 目录下创建mybatis的配置文件 mybatis-config.xml【复制粘贴的】。
 *              编写 SQL 映射文件 --> 统一管理sql语句，解决硬编码问题；
 *                  在模块的 resources 目录下创建映射配置文件 XxxMapper.xml；
 *
 *          解决SQL映射文件(xml文件)的警告提示：
 *              产生的原因：IDEA和数据库没有建立连接，不识别表信息。但是大家一定要记住，它并不影响程序的执行。
 *              解决方式：在IDEA中配置MySQL数据库连接。
 *              IDEA中配置MySQL数据库连接
 *                  1.点击IDEA右边框的 Database ，在展开的界面点击 + 选择 Data Source ，再选择 MySQL；
 *                  2.在弹出的界面进行基本信息的填写，并点击确认；
 *                  3.点击Query Console【漏斗左边】 调出console页面，可以在里面编写SQL语句。
 *
 *
 *
 *          Mybatis的Mapper代理开发【xml配置文件开发】：解决原生方式中的硬编码；简化后期执行SQL。
 *              使用Mybatis的Mapper代理开发要求：这里写的是使用xml配置文件开发。可以查询Mybatis官网查看可以配置的内容。
 *                  1.定义与SQL映射文件(xml文件)同名的Mapper接口，并且将SQL映射文件(xml文件)和Mapper接口文件放置在同一目录下；
 *                      1.1.SQL映射文件是XxxMapper.xml文件，XxxMapper.xml文件与XxxMapper接口文件放置在同一目录下。
 *                      1.2.XxxMapper.xml文件在src目录的resources目录里；XxxMapper接口文件在src目录的main目录里；
 *                  2.设置SQL映射文件(xml文件)的namespace属性为Mapper接口全限定接口名，这样就与对应的XxxMapper接口建立联系了；
 *                      2.1.namespace:名称空间。必须是对应接口的全限定接口名；
 *                      2.2.<mapper namespace="对应接口的全限定接口名">；
 *                  3.在 Mapper 接口中定义方法，方法名就是SQL映射文件中sql语句的id，并保持参数类型和返回值类型一致。
 *                  注意：如果Mapper接口名称和SQL映射文件(xml文件)名称相同，并在同一目录下，则可以在核心配置文件(mybatis-config.xml)
 *                  中使用包扫描的方式简化SQL映射文件的加载【见程序代码，后面会使用代理开发简化配置文件开发】。
 *
 *
 *
 *          MybatisX 是一款基于 IDEA 的快速开发插件，为效率而生。适用于Mybatis的Mapper代理开发【xml配置文件开发】
 *                  主要功能：XML映射配置文件 和 接口方法 间相互跳转；根据接口方法生成 statement。
 *                  红色头绳的表示映射配置文件，蓝色头绳的表示mapper接口。
 *                  在mapper接口点击红色头绳的小鸟图标会自动跳转到对应的映射配置文件，在映射配置文件中点击蓝色头绳的小鸟图标会自动跳转到对应的mapper接口。
 *                  可以在mapper接口中定义方法，自动生成映射配置文件中的 statement【在Mapper接口中定义方法，在爆红的地方使用alt+回车自动生成xml配置文件中的statement】。
 *
 *
 *          Mybatis提供了两种参数占位符：
 *                  1.#{} ：执行SQL时，会将 #{} 占位符替换为？，将来自动设置参数值。从上述例子可以看出使用#{} 底层使用的是PreparedStatement。
 *                  2.${} ：拼接SQL。底层使用的是 Statement ，会存在SQL注入问题。如下图将 映射配置文件中的 #{} 替换成 ${} 来看效果。
 *
 *
 *
 *          Mybatis使用注解实现CRUD：Mybatis 针对 CURD 操作都提供了对应的注解。
 *                  注解是用来替换映射配置文件方式配置的，所以使用了注解，就不需要再映射配置文件中书写对应的 statement；
 *                  1.查询 ：@Select；
 *                  2.添加 ：@Insert；
 *                  3.修改 ：@Update；
 *                  4.删除 ：@Delete；
 *
 *
 *
 *  Maven
 *      Maven简介
 *          Apache Maven 是一个项目管理和构建工具，它基于项目对象模型(POM)的概念，通过一小段描述信息来管理项目的构建、报告和文档。
 *
 *      Maven是专门用于管理和构建Java项目的工具，它的主要功能有：
 *          Maven提供了一套标准化的项目结构,所有的IDE使用Maven构建的项目完全一样，所以IDE创建的Maven项目可以通用;
 *          Maven提供了一套标准化的构建流程（编译，测试，打包，发布……）;
 *          Maven提供了一套依赖管理机制:依赖管理其实就是管理项目所依赖的第三方资源（jar包、插件）;
*               Maven使用标准的 坐标 配置来管理各种依赖，只需要简单的配置就可以完成依赖管理。
 *
 *
 *          Maven提供了一套标准化的项目结构:
 *              maven-project :项目名称
 *              src:源代码和测试代码目录
 *                   main:源代码目录
 *                      java:源代码java文件目录
 *                      resources:源代码配置文件目录
 *                      webapp:web项目核心目录
 *                  test:测试代码目录
 *                      java:测试代码java文件目录
 *                      resources:测试代码配置文件目录
 *              pom.xml:项目核心配置文件
 *
 *
 *
 *     Maven模型
 *          项目对象模型 (Project Object Model)：将当前Maven项目本身抽象成一个对象模型，有自己专属的坐标；
 *          依赖管理模型(Dependency)：使用坐标来描述当前项目依赖那些第三方jar包；
 *          插件(Plugin)：使用插件来完成标准化构建流程。如我们需要编译，Maven提供了一个编译插件供我们使用，我们需要打包，Maven就提供了一个打包插件提供我们使用等。
 *
 *
 *          Maven安装目录结构：
 *              bin目录 ： 存放的是可执行命令。mvn 命令重点关注；
 *              conf目录 ：存放Maven的配置文件。 settings.xml 配置文件后期需要修改。
 *              lib目录 ：存放Maven依赖的jar包。Maven也是使用java开发的，所以它也依赖其他的jar包。
 *
 *
 *          Maven 常用命令：在PowerShell中或者IDEA的Terminal中运行时命令是：mvn 命令名；例如：mvn compile；
 *              compile ：编译；编译项目的源代码，在该项目目录下会生成一个target目录，编译后的字节码文件就放在target目录下。
 *              clean：清理；执行Maven的clean【编译】命令之后，删除项目下的 target 目录。
 *              test：测试；使用合适的单元测试框架运行测试（Juint是其中之一）,该命令会执行所有的测试代码。
 *              package：打包；将编译后的代码打包成可分发格式的文件，比如JAR、WAR或者EAR文件，在项目的 target 目录下有一个jar/war/ear包（将当前项目打成的jar/war/ear包）。
 *              install：安装；安装项目包到本地仓库，这样项目包可以用作本地项目的依赖。该命令会将当前项目打成jar包，并安装到本地仓库。
 *
 *
 *           Maven 生命周期
 *              Maven 构建项目生命周期描述的是一次构建过程经历经历了多少个事件。
 *              Maven 对项目构建的生命周期划分为3套：
 *                  clean ：清理工作。
 *                  default ：核心工作，例如编译，测试，打包，安装等。
 *                  site ： 产生报告，发布站点等。这套声明周期一般不会使用。
 *
 *              同一套生命周期内，执行后边的命令，前面的所有命令会自动执行。
 *                  例如默认（default）生命周期如下：compile->test->package->install。
 *                  当我们执行 install （安装）命令时，它会先执行 compile 命令，再执行 test 命令，再执行 package 命令，最后执行install 命令。
 *                  当我们执行 package （打包）命令时，它会先执行 compile 命令，再执行 test 命令，最后执行 package 命令。
 *
 *
 *         IDEA 导入 Maven项目：
 *                  1.选择右侧Maven面板，点击 + 号；
 *                  2.选中对应项目的pom.xml文件，双击即可；
 *
 *
 *          Maven 坐标详解
 *                  Maven 中的坐标是资源的唯一标识【这里的资源可以是插件、依赖、当前项目】；
 *                  使用坐标来定义项目或引入项目中需要的依赖；
 *                  我们的项目如果被其他的项目依赖时，也是需要坐标来引入的。
 *              Maven 坐标主要组成:
 *                  groupId：定义当前Maven项目隶属组织名称（通常是域名反写，例如：com.apache）；
 *                  artifactId：定义当前Maven项目名称（通常是模块名称，例如 order-service、goods-service）；
 *                  version：定义当前项目版本号；
 *
 *
 *         IDEA 中 Maven项目的依赖管理：具体的坐标我们可以到如下网站进行搜索：https://mvnrepository.com/
 *                  方式1：使用坐标引入jar包,引入后要点击刷新按钮，使坐标生效。
 *                      1.1.在项目的 pom.xml 中编写 标签<dependencies>；
 *                      1.2.在 标签<dependencies>中 使用<dependency> 引入坐标；
 *                      1.3.定义坐标的 groupId，artifactId，version。
 *                  方式2：快捷方式导入jar包的坐标,引入后要点击刷新按钮，使坐标生效。
 *                      2.1.在 pom.xml 中 按 alt + insert，选择 Dependency；
 *                      2.2.在弹出的面板中搜索对应坐标，然后双击选中对应坐标；
 *                      2.1.在 pom.xml 中 按 alt + insert，选择 Dependency；
 *                      2.1.在 pom.xml 中 按 alt + insert，选择 Dependency；
 *
 *
 *         Maven项目的依赖范围
 *                  通过设置坐标的依赖范围(scope)，可以设置对应jar包的作用范围：编译环境、测试环境、运行环境。
 *                  compile ：作用于编译环境、测试环境、运行环境。如果引入坐标不指定 scope 标签时，默认就是 compile 值。以后大部分jar包都是使用默认值。
 *                  test ： 作用于测试环境。典型的就是Junit坐标，以后使用Junit时，都会将scope指定为该值。
 *                  provided ：作用于编译环境、测试环境。我们后面会学习 servlet-api ，在使用它时，必须将 scope 设置为该值，不然运行时就会报错。
 *                  runtime ： 作用于测试环境、运行环境。jdbc驱动一般将 scope 设置为该值，当然不设置也没有任何问题。
 *
 *
 *
 *
 *
* */



}
